#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'TestNetworkMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 42

# The Active Message type associated with this message.
AM_TYPE = 5

class TestNetworkMsg(tinyos.message.Message.Message):
    # Create a new TestNetworkMsg of size 42.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=42):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <TestNetworkMsg> \n"
        try:
            s += "  [source=0x%x]\n" % (self.get_source())
        except:
            pass
        try:
            s += "  [seqno=0x%x]\n" % (self.get_seqno())
        except:
            pass
        try:
            s += "  [parent=0x%x]\n" % (self.get_parent())
        except:
            pass
        try:
            s += "  [metric=0x%x]\n" % (self.get_metric())
        except:
            pass
        try:
            s += "  [flowid=0x%x]\n" % (self.get_flowid())
        except:
            pass
        try:
            s += "  [hopcount=0x%x]\n" % (self.get_hopcount())
        except:
            pass
        try:
            s += "  [txopper=";
            for i in range(0, 3):
                s += "0x%x " % (self.getElement_txopper(i) & 0xff)
            s += "]\n";
        except:
            pass
        try:
            s += "  [txdelay=";
            for i in range(0, 3):
                s += "0x%x " % (self.getElement_txdelay(i) & 0xff)
            s += "]\n";
        except:
            pass
        try:
            s += "  [job_idx=0x%x]\n" % (self.get_job_idx())
        except:
            pass
        try:
            s += "  [data1=0x%x]\n" % (self.get_data1())
        except:
            pass
        try:
            s += "  [data2=0x%x]\n" % (self.get_data2())
        except:
            pass
        try:
            s += "  [data3=0x%x]\n" % (self.get_data3())
        except:
            pass
        try:
            s += "  [data4=0x%x]\n" % (self.get_data4())
        except:
            pass
        try:
            s += "  [data5=0x%x]\n" % (self.get_data5())
        except:
            pass
        try:
            s += "  [data6=0x%x]\n" % (self.get_data6())
        except:
            pass
        try:
            s += "  [data7=0x%x]\n" % (self.get_data7())
        except:
            pass
        try:
            s += "  [data8=0x%x]\n" % (self.get_data8())
        except:
            pass
        try:
            s += "  [data9=0x%x]\n" % (self.get_data9())
        except:
            pass
        try:
            s += "  [data10=0x%x]\n" % (self.get_data10())
        except:
            pass
        try:
            s += "  [data11=0x%x]\n" % (self.get_data11())
        except:
            pass
        try:
            s += "  [data12=0x%x]\n" % (self.get_data12())
        except:
            pass
        try:
            s += "  [data13=0x%x]\n" % (self.get_data13())
        except:
            pass
        try:
            s += "  [data14=0x%x]\n" % (self.get_data14())
        except:
            pass
        try:
            s += "  [data15=0x%x]\n" % (self.get_data15())
        except:
            pass
        try:
            s += "  [data16=0x%x]\n" % (self.get_data16())
        except:
            pass
        try:
            s += "  [data17=0x%x]\n" % (self.get_data17())
        except:
            pass
        try:
            s += "  [data18=0x%x]\n" % (self.get_data18())
        except:
            pass
        try:
            s += "  [data19=0x%x]\n" % (self.get_data19())
        except:
            pass
        try:
            s += "  [data20=0x%x]\n" % (self.get_data20())
        except:
            pass
        try:
            s += "  [sendCount=0x%x]\n" % (self.get_sendCount())
        except:
            pass
        try:
            s += "  [sendSuccessCount=0x%x]\n" % (self.get_sendSuccessCount())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: source
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'source' is signed (False).
    #
    def isSigned_source(self):
        return False
    
    #
    # Return whether the field 'source' is an array (False).
    #
    def isArray_source(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'source'
    #
    def offset_source(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'source'
    #
    def offsetBits_source(self):
        return 0
    
    #
    # Return the value (as a int) of the field 'source'
    #
    def get_source(self):
        return self.getUIntElement(self.offsetBits_source(), 16, 1)
    
    #
    # Set the value of the field 'source'
    #
    def set_source(self, value):
        self.setUIntElement(self.offsetBits_source(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'source'
    #
    def size_source(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'source'
    #
    def sizeBits_source(self):
        return 16
    
    #
    # Accessor methods for field: seqno
    #   Field type: int
    #   Offset (bits): 16
    #   Size (bits): 16
    #

    #
    # Return whether the field 'seqno' is signed (False).
    #
    def isSigned_seqno(self):
        return False
    
    #
    # Return whether the field 'seqno' is an array (False).
    #
    def isArray_seqno(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'seqno'
    #
    def offset_seqno(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'seqno'
    #
    def offsetBits_seqno(self):
        return 16
    
    #
    # Return the value (as a int) of the field 'seqno'
    #
    def get_seqno(self):
        return self.getUIntElement(self.offsetBits_seqno(), 16, 1)
    
    #
    # Set the value of the field 'seqno'
    #
    def set_seqno(self, value):
        self.setUIntElement(self.offsetBits_seqno(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'seqno'
    #
    def size_seqno(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'seqno'
    #
    def sizeBits_seqno(self):
        return 16
    
    #
    # Accessor methods for field: parent
    #   Field type: int
    #   Offset (bits): 32
    #   Size (bits): 16
    #

    #
    # Return whether the field 'parent' is signed (False).
    #
    def isSigned_parent(self):
        return False
    
    #
    # Return whether the field 'parent' is an array (False).
    #
    def isArray_parent(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'parent'
    #
    def offset_parent(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'parent'
    #
    def offsetBits_parent(self):
        return 32
    
    #
    # Return the value (as a int) of the field 'parent'
    #
    def get_parent(self):
        return self.getUIntElement(self.offsetBits_parent(), 16, 1)
    
    #
    # Set the value of the field 'parent'
    #
    def set_parent(self, value):
        self.setUIntElement(self.offsetBits_parent(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'parent'
    #
    def size_parent(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'parent'
    #
    def sizeBits_parent(self):
        return 16
    
    #
    # Accessor methods for field: metric
    #   Field type: int
    #   Offset (bits): 48
    #   Size (bits): 16
    #

    #
    # Return whether the field 'metric' is signed (False).
    #
    def isSigned_metric(self):
        return False
    
    #
    # Return whether the field 'metric' is an array (False).
    #
    def isArray_metric(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'metric'
    #
    def offset_metric(self):
        return (48 / 8)
    
    #
    # Return the offset (in bits) of the field 'metric'
    #
    def offsetBits_metric(self):
        return 48
    
    #
    # Return the value (as a int) of the field 'metric'
    #
    def get_metric(self):
        return self.getUIntElement(self.offsetBits_metric(), 16, 1)
    
    #
    # Set the value of the field 'metric'
    #
    def set_metric(self, value):
        self.setUIntElement(self.offsetBits_metric(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'metric'
    #
    def size_metric(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'metric'
    #
    def sizeBits_metric(self):
        return 16
    
    #
    # Accessor methods for field: flowid
    #   Field type: short
    #   Offset (bits): 64
    #   Size (bits): 8
    #

    #
    # Return whether the field 'flowid' is signed (False).
    #
    def isSigned_flowid(self):
        return False
    
    #
    # Return whether the field 'flowid' is an array (False).
    #
    def isArray_flowid(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'flowid'
    #
    def offset_flowid(self):
        return (64 / 8)
    
    #
    # Return the offset (in bits) of the field 'flowid'
    #
    def offsetBits_flowid(self):
        return 64
    
    #
    # Return the value (as a short) of the field 'flowid'
    #
    def get_flowid(self):
        return self.getUIntElement(self.offsetBits_flowid(), 8, 1)
    
    #
    # Set the value of the field 'flowid'
    #
    def set_flowid(self, value):
        self.setUIntElement(self.offsetBits_flowid(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'flowid'
    #
    def size_flowid(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'flowid'
    #
    def sizeBits_flowid(self):
        return 8
    
    #
    # Accessor methods for field: hopcount
    #   Field type: short
    #   Offset (bits): 72
    #   Size (bits): 8
    #

    #
    # Return whether the field 'hopcount' is signed (False).
    #
    def isSigned_hopcount(self):
        return False
    
    #
    # Return whether the field 'hopcount' is an array (False).
    #
    def isArray_hopcount(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'hopcount'
    #
    def offset_hopcount(self):
        return (72 / 8)
    
    #
    # Return the offset (in bits) of the field 'hopcount'
    #
    def offsetBits_hopcount(self):
        return 72
    
    #
    # Return the value (as a short) of the field 'hopcount'
    #
    def get_hopcount(self):
        return self.getUIntElement(self.offsetBits_hopcount(), 8, 1)
    
    #
    # Set the value of the field 'hopcount'
    #
    def set_hopcount(self, value):
        self.setUIntElement(self.offsetBits_hopcount(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'hopcount'
    #
    def size_hopcount(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'hopcount'
    #
    def sizeBits_hopcount(self):
        return 8
    
    #
    # Accessor methods for field: txopper
    #   Field type: short[]
    #   Offset (bits): 80
    #   Size of each element (bits): 8
    #

    #
    # Return whether the field 'txopper' is signed (False).
    #
    def isSigned_txopper(self):
        return False
    
    #
    # Return whether the field 'txopper' is an array (True).
    #
    def isArray_txopper(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'txopper'
    #
    def offset_txopper(self, index1):
        offset = 80
        if index1 < 0 or index1 >= 3:
            raise IndexError
        offset += 0 + index1 * 8
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'txopper'
    #
    def offsetBits_txopper(self, index1):
        offset = 80
        if index1 < 0 or index1 >= 3:
            raise IndexError
        offset += 0 + index1 * 8
        return offset
    
    #
    # Return the entire array 'txopper' as a short[]
    #
    def get_txopper(self):
        tmp = [None]*3
        for index0 in range (0, self.numElements_txopper(0)):
                tmp[index0] = self.getElement_txopper(index0)
        return tmp
    
    #
    # Set the contents of the array 'txopper' from the given short[]
    #
    def set_txopper(self, value):
        for index0 in range(0, len(value)):
            self.setElement_txopper(index0, value[index0])

    #
    # Return an element (as a short) of the array 'txopper'
    #
    def getElement_txopper(self, index1):
        return self.getUIntElement(self.offsetBits_txopper(index1), 8, 1)
    
    #
    # Set an element of the array 'txopper'
    #
    def setElement_txopper(self, index1, value):
        self.setUIntElement(self.offsetBits_txopper(index1), 8, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'txopper'
    #
    def totalSize_txopper(self):
        return (24 / 8)
    
    #
    # Return the total size, in bits, of the array 'txopper'
    #
    def totalSizeBits_txopper(self):
        return 24
    
    #
    # Return the size, in bytes, of each element of the array 'txopper'
    #
    def elementSize_txopper(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'txopper'
    #
    def elementSizeBits_txopper(self):
        return 8
    
    #
    # Return the number of dimensions in the array 'txopper'
    #
    def numDimensions_txopper(self):
        return 1
    
    #
    # Return the number of elements in the array 'txopper'
    #
    def numElements_txopper():
        return 3
    
    #
    # Return the number of elements in the array 'txopper'
    # for the given dimension.
    #
    def numElements_txopper(self, dimension):
        array_dims = [ 3,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Fill in the array 'txopper' with a String
    #
    def setString_txopper(self, s):
         l = len(s)
         for i in range(0, l):
             self.setElement_txopper(i, ord(s[i]));
         self.setElement_txopper(l, 0) #null terminate
    
    #
    # Read the array 'txopper' as a String
    #
    def getString_txopper(self):
        carr = "";
        for i in range(0, 4000):
            if self.getElement_txopper(i) == chr(0):
                break
            carr += self.getElement_txopper(i)
        return carr
    
    #
    # Accessor methods for field: txdelay
    #   Field type: short[]
    #   Offset (bits): 104
    #   Size of each element (bits): 8
    #

    #
    # Return whether the field 'txdelay' is signed (False).
    #
    def isSigned_txdelay(self):
        return False
    
    #
    # Return whether the field 'txdelay' is an array (True).
    #
    def isArray_txdelay(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'txdelay'
    #
    def offset_txdelay(self, index1):
        offset = 104
        if index1 < 0 or index1 >= 3:
            raise IndexError
        offset += 0 + index1 * 8
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'txdelay'
    #
    def offsetBits_txdelay(self, index1):
        offset = 104
        if index1 < 0 or index1 >= 3:
            raise IndexError
        offset += 0 + index1 * 8
        return offset
    
    #
    # Return the entire array 'txdelay' as a short[]
    #
    def get_txdelay(self):
        tmp = [None]*3
        for index0 in range (0, self.numElements_txdelay(0)):
                tmp[index0] = self.getElement_txdelay(index0)
        return tmp
    
    #
    # Set the contents of the array 'txdelay' from the given short[]
    #
    def set_txdelay(self, value):
        for index0 in range(0, len(value)):
            self.setElement_txdelay(index0, value[index0])

    #
    # Return an element (as a short) of the array 'txdelay'
    #
    def getElement_txdelay(self, index1):
        return self.getUIntElement(self.offsetBits_txdelay(index1), 8, 1)
    
    #
    # Set an element of the array 'txdelay'
    #
    def setElement_txdelay(self, index1, value):
        self.setUIntElement(self.offsetBits_txdelay(index1), 8, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'txdelay'
    #
    def totalSize_txdelay(self):
        return (24 / 8)
    
    #
    # Return the total size, in bits, of the array 'txdelay'
    #
    def totalSizeBits_txdelay(self):
        return 24
    
    #
    # Return the size, in bytes, of each element of the array 'txdelay'
    #
    def elementSize_txdelay(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'txdelay'
    #
    def elementSizeBits_txdelay(self):
        return 8
    
    #
    # Return the number of dimensions in the array 'txdelay'
    #
    def numDimensions_txdelay(self):
        return 1
    
    #
    # Return the number of elements in the array 'txdelay'
    #
    def numElements_txdelay():
        return 3
    
    #
    # Return the number of elements in the array 'txdelay'
    # for the given dimension.
    #
    def numElements_txdelay(self, dimension):
        array_dims = [ 3,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Fill in the array 'txdelay' with a String
    #
    def setString_txdelay(self, s):
         l = len(s)
         for i in range(0, l):
             self.setElement_txdelay(i, ord(s[i]));
         self.setElement_txdelay(l, 0) #null terminate
    
    #
    # Read the array 'txdelay' as a String
    #
    def getString_txdelay(self):
        carr = "";
        for i in range(0, 4000):
            if self.getElement_txdelay(i) == chr(0):
                break
            carr += self.getElement_txdelay(i)
        return carr
    
    #
    # Accessor methods for field: job_idx
    #   Field type: int
    #   Offset (bits): 128
    #   Size (bits): 16
    #

    #
    # Return whether the field 'job_idx' is signed (False).
    #
    def isSigned_job_idx(self):
        return False
    
    #
    # Return whether the field 'job_idx' is an array (False).
    #
    def isArray_job_idx(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'job_idx'
    #
    def offset_job_idx(self):
        return (128 / 8)
    
    #
    # Return the offset (in bits) of the field 'job_idx'
    #
    def offsetBits_job_idx(self):
        return 128
    
    #
    # Return the value (as a int) of the field 'job_idx'
    #
    def get_job_idx(self):
        return self.getUIntElement(self.offsetBits_job_idx(), 16, 1)
    
    #
    # Set the value of the field 'job_idx'
    #
    def set_job_idx(self, value):
        self.setUIntElement(self.offsetBits_job_idx(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'job_idx'
    #
    def size_job_idx(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'job_idx'
    #
    def sizeBits_job_idx(self):
        return 16
    
    #
    # Accessor methods for field: data1
    #   Field type: short
    #   Offset (bits): 144
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data1' is signed (False).
    #
    def isSigned_data1(self):
        return False
    
    #
    # Return whether the field 'data1' is an array (False).
    #
    def isArray_data1(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data1'
    #
    def offset_data1(self):
        return (144 / 8)
    
    #
    # Return the offset (in bits) of the field 'data1'
    #
    def offsetBits_data1(self):
        return 144
    
    #
    # Return the value (as a short) of the field 'data1'
    #
    def get_data1(self):
        return self.getUIntElement(self.offsetBits_data1(), 8, 1)
    
    #
    # Set the value of the field 'data1'
    #
    def set_data1(self, value):
        self.setUIntElement(self.offsetBits_data1(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data1'
    #
    def size_data1(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data1'
    #
    def sizeBits_data1(self):
        return 8
    
    #
    # Accessor methods for field: data2
    #   Field type: short
    #   Offset (bits): 152
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data2' is signed (False).
    #
    def isSigned_data2(self):
        return False
    
    #
    # Return whether the field 'data2' is an array (False).
    #
    def isArray_data2(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data2'
    #
    def offset_data2(self):
        return (152 / 8)
    
    #
    # Return the offset (in bits) of the field 'data2'
    #
    def offsetBits_data2(self):
        return 152
    
    #
    # Return the value (as a short) of the field 'data2'
    #
    def get_data2(self):
        return self.getUIntElement(self.offsetBits_data2(), 8, 1)
    
    #
    # Set the value of the field 'data2'
    #
    def set_data2(self, value):
        self.setUIntElement(self.offsetBits_data2(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data2'
    #
    def size_data2(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data2'
    #
    def sizeBits_data2(self):
        return 8
    
    #
    # Accessor methods for field: data3
    #   Field type: short
    #   Offset (bits): 160
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data3' is signed (False).
    #
    def isSigned_data3(self):
        return False
    
    #
    # Return whether the field 'data3' is an array (False).
    #
    def isArray_data3(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data3'
    #
    def offset_data3(self):
        return (160 / 8)
    
    #
    # Return the offset (in bits) of the field 'data3'
    #
    def offsetBits_data3(self):
        return 160
    
    #
    # Return the value (as a short) of the field 'data3'
    #
    def get_data3(self):
        return self.getUIntElement(self.offsetBits_data3(), 8, 1)
    
    #
    # Set the value of the field 'data3'
    #
    def set_data3(self, value):
        self.setUIntElement(self.offsetBits_data3(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data3'
    #
    def size_data3(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data3'
    #
    def sizeBits_data3(self):
        return 8
    
    #
    # Accessor methods for field: data4
    #   Field type: short
    #   Offset (bits): 168
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data4' is signed (False).
    #
    def isSigned_data4(self):
        return False
    
    #
    # Return whether the field 'data4' is an array (False).
    #
    def isArray_data4(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data4'
    #
    def offset_data4(self):
        return (168 / 8)
    
    #
    # Return the offset (in bits) of the field 'data4'
    #
    def offsetBits_data4(self):
        return 168
    
    #
    # Return the value (as a short) of the field 'data4'
    #
    def get_data4(self):
        return self.getUIntElement(self.offsetBits_data4(), 8, 1)
    
    #
    # Set the value of the field 'data4'
    #
    def set_data4(self, value):
        self.setUIntElement(self.offsetBits_data4(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data4'
    #
    def size_data4(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data4'
    #
    def sizeBits_data4(self):
        return 8
    
    #
    # Accessor methods for field: data5
    #   Field type: short
    #   Offset (bits): 176
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data5' is signed (False).
    #
    def isSigned_data5(self):
        return False
    
    #
    # Return whether the field 'data5' is an array (False).
    #
    def isArray_data5(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data5'
    #
    def offset_data5(self):
        return (176 / 8)
    
    #
    # Return the offset (in bits) of the field 'data5'
    #
    def offsetBits_data5(self):
        return 176
    
    #
    # Return the value (as a short) of the field 'data5'
    #
    def get_data5(self):
        return self.getUIntElement(self.offsetBits_data5(), 8, 1)
    
    #
    # Set the value of the field 'data5'
    #
    def set_data5(self, value):
        self.setUIntElement(self.offsetBits_data5(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data5'
    #
    def size_data5(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data5'
    #
    def sizeBits_data5(self):
        return 8
    
    #
    # Accessor methods for field: data6
    #   Field type: short
    #   Offset (bits): 184
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data6' is signed (False).
    #
    def isSigned_data6(self):
        return False
    
    #
    # Return whether the field 'data6' is an array (False).
    #
    def isArray_data6(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data6'
    #
    def offset_data6(self):
        return (184 / 8)
    
    #
    # Return the offset (in bits) of the field 'data6'
    #
    def offsetBits_data6(self):
        return 184
    
    #
    # Return the value (as a short) of the field 'data6'
    #
    def get_data6(self):
        return self.getUIntElement(self.offsetBits_data6(), 8, 1)
    
    #
    # Set the value of the field 'data6'
    #
    def set_data6(self, value):
        self.setUIntElement(self.offsetBits_data6(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data6'
    #
    def size_data6(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data6'
    #
    def sizeBits_data6(self):
        return 8
    
    #
    # Accessor methods for field: data7
    #   Field type: short
    #   Offset (bits): 192
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data7' is signed (False).
    #
    def isSigned_data7(self):
        return False
    
    #
    # Return whether the field 'data7' is an array (False).
    #
    def isArray_data7(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data7'
    #
    def offset_data7(self):
        return (192 / 8)
    
    #
    # Return the offset (in bits) of the field 'data7'
    #
    def offsetBits_data7(self):
        return 192
    
    #
    # Return the value (as a short) of the field 'data7'
    #
    def get_data7(self):
        return self.getUIntElement(self.offsetBits_data7(), 8, 1)
    
    #
    # Set the value of the field 'data7'
    #
    def set_data7(self, value):
        self.setUIntElement(self.offsetBits_data7(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data7'
    #
    def size_data7(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data7'
    #
    def sizeBits_data7(self):
        return 8
    
    #
    # Accessor methods for field: data8
    #   Field type: short
    #   Offset (bits): 200
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data8' is signed (False).
    #
    def isSigned_data8(self):
        return False
    
    #
    # Return whether the field 'data8' is an array (False).
    #
    def isArray_data8(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data8'
    #
    def offset_data8(self):
        return (200 / 8)
    
    #
    # Return the offset (in bits) of the field 'data8'
    #
    def offsetBits_data8(self):
        return 200
    
    #
    # Return the value (as a short) of the field 'data8'
    #
    def get_data8(self):
        return self.getUIntElement(self.offsetBits_data8(), 8, 1)
    
    #
    # Set the value of the field 'data8'
    #
    def set_data8(self, value):
        self.setUIntElement(self.offsetBits_data8(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data8'
    #
    def size_data8(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data8'
    #
    def sizeBits_data8(self):
        return 8
    
    #
    # Accessor methods for field: data9
    #   Field type: short
    #   Offset (bits): 208
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data9' is signed (False).
    #
    def isSigned_data9(self):
        return False
    
    #
    # Return whether the field 'data9' is an array (False).
    #
    def isArray_data9(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data9'
    #
    def offset_data9(self):
        return (208 / 8)
    
    #
    # Return the offset (in bits) of the field 'data9'
    #
    def offsetBits_data9(self):
        return 208
    
    #
    # Return the value (as a short) of the field 'data9'
    #
    def get_data9(self):
        return self.getUIntElement(self.offsetBits_data9(), 8, 1)
    
    #
    # Set the value of the field 'data9'
    #
    def set_data9(self, value):
        self.setUIntElement(self.offsetBits_data9(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data9'
    #
    def size_data9(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data9'
    #
    def sizeBits_data9(self):
        return 8
    
    #
    # Accessor methods for field: data10
    #   Field type: short
    #   Offset (bits): 216
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data10' is signed (False).
    #
    def isSigned_data10(self):
        return False
    
    #
    # Return whether the field 'data10' is an array (False).
    #
    def isArray_data10(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data10'
    #
    def offset_data10(self):
        return (216 / 8)
    
    #
    # Return the offset (in bits) of the field 'data10'
    #
    def offsetBits_data10(self):
        return 216
    
    #
    # Return the value (as a short) of the field 'data10'
    #
    def get_data10(self):
        return self.getUIntElement(self.offsetBits_data10(), 8, 1)
    
    #
    # Set the value of the field 'data10'
    #
    def set_data10(self, value):
        self.setUIntElement(self.offsetBits_data10(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data10'
    #
    def size_data10(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data10'
    #
    def sizeBits_data10(self):
        return 8
    
    #
    # Accessor methods for field: data11
    #   Field type: short
    #   Offset (bits): 224
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data11' is signed (False).
    #
    def isSigned_data11(self):
        return False
    
    #
    # Return whether the field 'data11' is an array (False).
    #
    def isArray_data11(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data11'
    #
    def offset_data11(self):
        return (224 / 8)
    
    #
    # Return the offset (in bits) of the field 'data11'
    #
    def offsetBits_data11(self):
        return 224
    
    #
    # Return the value (as a short) of the field 'data11'
    #
    def get_data11(self):
        return self.getUIntElement(self.offsetBits_data11(), 8, 1)
    
    #
    # Set the value of the field 'data11'
    #
    def set_data11(self, value):
        self.setUIntElement(self.offsetBits_data11(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data11'
    #
    def size_data11(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data11'
    #
    def sizeBits_data11(self):
        return 8
    
    #
    # Accessor methods for field: data12
    #   Field type: short
    #   Offset (bits): 232
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data12' is signed (False).
    #
    def isSigned_data12(self):
        return False
    
    #
    # Return whether the field 'data12' is an array (False).
    #
    def isArray_data12(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data12'
    #
    def offset_data12(self):
        return (232 / 8)
    
    #
    # Return the offset (in bits) of the field 'data12'
    #
    def offsetBits_data12(self):
        return 232
    
    #
    # Return the value (as a short) of the field 'data12'
    #
    def get_data12(self):
        return self.getUIntElement(self.offsetBits_data12(), 8, 1)
    
    #
    # Set the value of the field 'data12'
    #
    def set_data12(self, value):
        self.setUIntElement(self.offsetBits_data12(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data12'
    #
    def size_data12(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data12'
    #
    def sizeBits_data12(self):
        return 8
    
    #
    # Accessor methods for field: data13
    #   Field type: short
    #   Offset (bits): 240
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data13' is signed (False).
    #
    def isSigned_data13(self):
        return False
    
    #
    # Return whether the field 'data13' is an array (False).
    #
    def isArray_data13(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data13'
    #
    def offset_data13(self):
        return (240 / 8)
    
    #
    # Return the offset (in bits) of the field 'data13'
    #
    def offsetBits_data13(self):
        return 240
    
    #
    # Return the value (as a short) of the field 'data13'
    #
    def get_data13(self):
        return self.getUIntElement(self.offsetBits_data13(), 8, 1)
    
    #
    # Set the value of the field 'data13'
    #
    def set_data13(self, value):
        self.setUIntElement(self.offsetBits_data13(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data13'
    #
    def size_data13(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data13'
    #
    def sizeBits_data13(self):
        return 8
    
    #
    # Accessor methods for field: data14
    #   Field type: short
    #   Offset (bits): 248
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data14' is signed (False).
    #
    def isSigned_data14(self):
        return False
    
    #
    # Return whether the field 'data14' is an array (False).
    #
    def isArray_data14(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data14'
    #
    def offset_data14(self):
        return (248 / 8)
    
    #
    # Return the offset (in bits) of the field 'data14'
    #
    def offsetBits_data14(self):
        return 248
    
    #
    # Return the value (as a short) of the field 'data14'
    #
    def get_data14(self):
        return self.getUIntElement(self.offsetBits_data14(), 8, 1)
    
    #
    # Set the value of the field 'data14'
    #
    def set_data14(self, value):
        self.setUIntElement(self.offsetBits_data14(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data14'
    #
    def size_data14(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data14'
    #
    def sizeBits_data14(self):
        return 8
    
    #
    # Accessor methods for field: data15
    #   Field type: short
    #   Offset (bits): 256
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data15' is signed (False).
    #
    def isSigned_data15(self):
        return False
    
    #
    # Return whether the field 'data15' is an array (False).
    #
    def isArray_data15(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data15'
    #
    def offset_data15(self):
        return (256 / 8)
    
    #
    # Return the offset (in bits) of the field 'data15'
    #
    def offsetBits_data15(self):
        return 256
    
    #
    # Return the value (as a short) of the field 'data15'
    #
    def get_data15(self):
        return self.getUIntElement(self.offsetBits_data15(), 8, 1)
    
    #
    # Set the value of the field 'data15'
    #
    def set_data15(self, value):
        self.setUIntElement(self.offsetBits_data15(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data15'
    #
    def size_data15(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data15'
    #
    def sizeBits_data15(self):
        return 8
    
    #
    # Accessor methods for field: data16
    #   Field type: short
    #   Offset (bits): 264
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data16' is signed (False).
    #
    def isSigned_data16(self):
        return False
    
    #
    # Return whether the field 'data16' is an array (False).
    #
    def isArray_data16(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data16'
    #
    def offset_data16(self):
        return (264 / 8)
    
    #
    # Return the offset (in bits) of the field 'data16'
    #
    def offsetBits_data16(self):
        return 264
    
    #
    # Return the value (as a short) of the field 'data16'
    #
    def get_data16(self):
        return self.getUIntElement(self.offsetBits_data16(), 8, 1)
    
    #
    # Set the value of the field 'data16'
    #
    def set_data16(self, value):
        self.setUIntElement(self.offsetBits_data16(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data16'
    #
    def size_data16(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data16'
    #
    def sizeBits_data16(self):
        return 8
    
    #
    # Accessor methods for field: data17
    #   Field type: short
    #   Offset (bits): 272
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data17' is signed (False).
    #
    def isSigned_data17(self):
        return False
    
    #
    # Return whether the field 'data17' is an array (False).
    #
    def isArray_data17(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data17'
    #
    def offset_data17(self):
        return (272 / 8)
    
    #
    # Return the offset (in bits) of the field 'data17'
    #
    def offsetBits_data17(self):
        return 272
    
    #
    # Return the value (as a short) of the field 'data17'
    #
    def get_data17(self):
        return self.getUIntElement(self.offsetBits_data17(), 8, 1)
    
    #
    # Set the value of the field 'data17'
    #
    def set_data17(self, value):
        self.setUIntElement(self.offsetBits_data17(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data17'
    #
    def size_data17(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data17'
    #
    def sizeBits_data17(self):
        return 8
    
    #
    # Accessor methods for field: data18
    #   Field type: short
    #   Offset (bits): 280
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data18' is signed (False).
    #
    def isSigned_data18(self):
        return False
    
    #
    # Return whether the field 'data18' is an array (False).
    #
    def isArray_data18(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data18'
    #
    def offset_data18(self):
        return (280 / 8)
    
    #
    # Return the offset (in bits) of the field 'data18'
    #
    def offsetBits_data18(self):
        return 280
    
    #
    # Return the value (as a short) of the field 'data18'
    #
    def get_data18(self):
        return self.getUIntElement(self.offsetBits_data18(), 8, 1)
    
    #
    # Set the value of the field 'data18'
    #
    def set_data18(self, value):
        self.setUIntElement(self.offsetBits_data18(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data18'
    #
    def size_data18(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data18'
    #
    def sizeBits_data18(self):
        return 8
    
    #
    # Accessor methods for field: data19
    #   Field type: short
    #   Offset (bits): 288
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data19' is signed (False).
    #
    def isSigned_data19(self):
        return False
    
    #
    # Return whether the field 'data19' is an array (False).
    #
    def isArray_data19(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data19'
    #
    def offset_data19(self):
        return (288 / 8)
    
    #
    # Return the offset (in bits) of the field 'data19'
    #
    def offsetBits_data19(self):
        return 288
    
    #
    # Return the value (as a short) of the field 'data19'
    #
    def get_data19(self):
        return self.getUIntElement(self.offsetBits_data19(), 8, 1)
    
    #
    # Set the value of the field 'data19'
    #
    def set_data19(self, value):
        self.setUIntElement(self.offsetBits_data19(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data19'
    #
    def size_data19(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data19'
    #
    def sizeBits_data19(self):
        return 8
    
    #
    # Accessor methods for field: data20
    #   Field type: short
    #   Offset (bits): 296
    #   Size (bits): 8
    #

    #
    # Return whether the field 'data20' is signed (False).
    #
    def isSigned_data20(self):
        return False
    
    #
    # Return whether the field 'data20' is an array (False).
    #
    def isArray_data20(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'data20'
    #
    def offset_data20(self):
        return (296 / 8)
    
    #
    # Return the offset (in bits) of the field 'data20'
    #
    def offsetBits_data20(self):
        return 296
    
    #
    # Return the value (as a short) of the field 'data20'
    #
    def get_data20(self):
        return self.getUIntElement(self.offsetBits_data20(), 8, 1)
    
    #
    # Set the value of the field 'data20'
    #
    def set_data20(self, value):
        self.setUIntElement(self.offsetBits_data20(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'data20'
    #
    def size_data20(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'data20'
    #
    def sizeBits_data20(self):
        return 8
    
    #
    # Accessor methods for field: sendCount
    #   Field type: int
    #   Offset (bits): 304
    #   Size (bits): 16
    #

    #
    # Return whether the field 'sendCount' is signed (False).
    #
    def isSigned_sendCount(self):
        return False
    
    #
    # Return whether the field 'sendCount' is an array (False).
    #
    def isArray_sendCount(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'sendCount'
    #
    def offset_sendCount(self):
        return (304 / 8)
    
    #
    # Return the offset (in bits) of the field 'sendCount'
    #
    def offsetBits_sendCount(self):
        return 304
    
    #
    # Return the value (as a int) of the field 'sendCount'
    #
    def get_sendCount(self):
        return self.getUIntElement(self.offsetBits_sendCount(), 16, 1)
    
    #
    # Set the value of the field 'sendCount'
    #
    def set_sendCount(self, value):
        self.setUIntElement(self.offsetBits_sendCount(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'sendCount'
    #
    def size_sendCount(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'sendCount'
    #
    def sizeBits_sendCount(self):
        return 16
    
    #
    # Accessor methods for field: sendSuccessCount
    #   Field type: int
    #   Offset (bits): 320
    #   Size (bits): 16
    #

    #
    # Return whether the field 'sendSuccessCount' is signed (False).
    #
    def isSigned_sendSuccessCount(self):
        return False
    
    #
    # Return whether the field 'sendSuccessCount' is an array (False).
    #
    def isArray_sendSuccessCount(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'sendSuccessCount'
    #
    def offset_sendSuccessCount(self):
        return (320 / 8)
    
    #
    # Return the offset (in bits) of the field 'sendSuccessCount'
    #
    def offsetBits_sendSuccessCount(self):
        return 320
    
    #
    # Return the value (as a int) of the field 'sendSuccessCount'
    #
    def get_sendSuccessCount(self):
        return self.getUIntElement(self.offsetBits_sendSuccessCount(), 16, 1)
    
    #
    # Set the value of the field 'sendSuccessCount'
    #
    def set_sendSuccessCount(self, value):
        self.setUIntElement(self.offsetBits_sendSuccessCount(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'sendSuccessCount'
    #
    def size_sendSuccessCount(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'sendSuccessCount'
    #
    def sizeBits_sendSuccessCount(self):
        return 16
    
